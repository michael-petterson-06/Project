{"ast":null,"code":"import data from './movieData';\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = movies => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => new Promise(resolve => {\n  setTimeout(() => {\n    const movies = readMovies();\n    resolve(movies);\n  }, 2000);\n});\nexport const getMovie = movieId => {\n  const movie = readMovies().find(mov => mov.id === parseInt(movieId, 10));\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\nexport const updateMovie = updatedMovie => {\n  const movies = readMovies().map(movie => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie,\n        ...updatedMovie\n      };\n    }\n\n    return movie;\n  });\n  saveMovies(movies);\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\nexport const createMovie = movieData => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData,\n    id: nextId\n  };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\nexport const deleteMovie = movieId => {\n  let movies = readMovies();\n  movies = movies.filter(movie => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        status: 'OK'\n      });\n    }, 1000);\n  });\n};","map":{"version":3,"sources":["/home/michael/Desenvolvedor/trybe/turma-03-projetos-copia/hebert-freitas/sd-03-block14-project-movie-card-library-crud/src/services/movieAPI.js"],"names":["data","localStorage","setItem","JSON","stringify","readMovies","parse","getItem","saveMovies","movies","getMovies","Promise","resolve","setTimeout","getMovie","movieId","movie","find","mov","id","parseInt","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status"],"mappings":"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","sourcesContent":["import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}